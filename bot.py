import asyncio
import logging
import random
import sqlite3
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from openai import AsyncOpenAI

# =============== –ù–ê–°–¢–†–û–ô–ö–ò ===============
API_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–û–¢_BOTFATHER"
OPENAI_API_KEY = "–í–ê–®_–¢–û–ö–ï–ù_OPENAI"
WEATHER_API_KEY = "–í–ê–®_–¢–û–ö–ï–ù_–û–¢_OPENWEATHER"
DB_PATH = "bot.db"
ADMIN_ID = 123456789  # —Ç–≤–æ–π Telegram ID (—É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
gpt = AsyncOpenAI(api_key=OPENAI_API_KEY)

# =============== –ë–ê–ó–ê –î–ê–ù–ù–´–• ===============
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT
        )
    """)
    conn.commit()
    conn.close()

def log_message(user_id: int, text: str):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO logs (user_id, message) VALUES (?, ?)", (user_id, text))
    conn.commit()
    conn.close()

def get_logs(limit=10):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT id, user_id, message FROM logs ORDER BY id DESC LIMIT ?", (limit,))
    rows = c.fetchall()
    conn.close()
    return rows

def clear_logs():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM logs")
    conn.commit()
    conn.close()

# =============== –°–¢–ê–†–¢ ===============
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üåç –§–∞–∫—Ç", callback_data="fact")
    kb.button(text="üéÆ –ò–≥—Ä–∞", callback_data="game")
    kb.button(text="‚õÖ –ü–æ–≥–æ–¥–∞", callback_data="weather")
    kb.button(text="ü§ñ GPT", callback_data="gpt")
    kb.adjust(2)

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üöÄ\n"
        "–Ø —Å—É–ø–µ—Ä-–±–æ—Ç —Å —Ñ–∞–∫—Ç–∞–º–∏, –∏–≥—Ä–∞–º–∏, –ø–æ–≥–æ–¥–æ–π –∏ GPT.\n\n"
        "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ –¥–µ–ª–∞–µ–º:",
        reply_markup=kb.as_markup()
    )
    log_message(message.from_user.id, "/start")

# =============== –§–ê–ö–¢–´ ===============
@dp.callback_query(F.data == "fact")
async def send_fact(callback: types.CallbackQuery):
    facts = [
        "üêß –ü–∏–Ω–≥–≤–∏–Ω—ã ‚Äî –æ—Ç–ª–∏—á–Ω—ã–µ –ø–ª–æ–≤—Ü—ã, –Ω–æ –Ω–µ —É–º–µ—é—Ç –ª–µ—Ç–∞—Ç—å.",
        "üöÄ –ü–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ—Å–º–æ—Å–µ ‚Äî –Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω (1961).",
        "üí° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –ª–∞–º–ø–æ—á–∫–∞ –∑–∞–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–∞ –≠–¥–∏—Å–æ–Ω–æ–º –≤ 1879 –≥–æ–¥—É.",
        "üåä –û–∫–µ–∞–Ω—ã –ø–æ–∫—Ä—ã–≤–∞—é—Ç 71% –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ó–µ–º–ª–∏."
    ]
    fact = random.choice(facts)
    await callback.message.answer(fact)
    await callback.answer()
    log_message(callback.from_user.id, f"–§–∞–∫—Ç: {fact}")

# =============== –ò–ì–†–ê ===============
@dp.callback_query(F.data == "game")
async def start_game(callback: types.CallbackQuery):
    number = random.randint(1, 5)
    await callback.message.answer("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. –£–≥–∞–¥–∞–π!")

    @dp.message(F.text.regexp(r"^[1-5]$"))
    async def guess_number(message: types.Message):
        if int(message.text) == number:
            await message.answer("üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã —É–≥–∞–¥–∞–ª!")
        else:
            await message.answer(f"üòÖ –ù–µ—Ç, —è –∑–∞–≥–∞–¥–∞–ª {number}.")
        log_message(message.from_user.id, f"–ò–≥—Ä–∞: {message.text}")

    await callback.answer()

# =============== –ü–û–ì–û–î–ê ===============
@dp.callback_query(F.data == "weather")
async def get_weather(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")

    @dp.message()
    async def city_weather(message: types.Message):
        city = message.text
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                if resp.status == 200:
                    temp = data['main']['temp']
                    desc = data['weather'][0]['description']
                    await message.answer(f"‚õÖ –í {city} —Å–µ–π—á–∞—Å {temp}¬∞C, {desc}.")
                else:
                    await message.answer("üò¢ –ù–µ –Ω–∞—à—ë–ª –≥–æ—Ä–æ–¥.")
        log_message(message.from_user.id, f"–ü–æ–≥–æ–¥–∞: {city}")

    await callback.answer()

# =============== GPT ===============
@dp.callback_query(F.data == "gpt")
async def ask_gpt(callback: types.CallbackQuery):
    await callback.message.answer("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å ü§ñ:")

    @dp.message()
    async def gpt_reply(message: types.Message):
        response = await gpt.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": message.text}]
        )
        answer = response.choices[0].message.content
        await message.answer(answer)
        log_message(message.from_user.id, f"GPT: {message.text}")

    await callback.answer()

# =============== –ê–î–ú–ò–ù–ö–ê ===============
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    kb = InlineKeyboardBuilder()
    kb.button(text="üìä –õ–æ–≥–∏", callback_data="admin_logs")
    kb.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="admin_clear")
    kb.adjust(1)

    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "admin_logs")
async def admin_logs(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

    logs = get_logs()
    text = "\n".join([f"{row[0]}. {row[1]}: {row[2]}" for row in logs]) or "–õ–æ–≥–∏ –ø—É—Å—Ç—ã."
    await callback.message.answer(f"üìÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n\n{text}")
    await callback.answer()

@dp.callback_query(F.data == "admin_clear")
async def admin_clear(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)

    clear_logs()
    await callback.message.answer("üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã!")
    await callback.answer()

# =============== –ó–ê–ü–£–°–ö ===============
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())